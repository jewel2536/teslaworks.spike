{"version":3,"sources":["components/Navigation.js","constants/routes.js","components/Landing.js","components/App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","Link","to","LandingPage","App","BrowserRouter","components_Navigation","Route","exact","path","component","SignUpPage","SignInPage","PasswordForgetPage","HomePage","AccountPage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAeeA,EAVI,kBACjBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCPO,WDOb,YACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCPO,KDOb,YACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCPI,SDOV,SACJJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GCPO,YDOb,eEJKC,EALK,kBAClBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+GC8CWI,EAlCH,kBACZN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACM,EAAD,MAEAR,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAK,EAACC,KFtBW,IEuBjBC,UAAWP,IAEbL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAK,EAACC,KF5BW,UE6BjBC,UAAWC,MAEbb,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAK,EAACC,KF/BW,UEgCjBC,UAAWE,MAEbd,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAK,EAACC,KF/BmB,aEgCzBC,UAAWG,MAEbf,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAK,EAACC,KFrCQ,QEsCdC,UAAWI,MAEbhB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,OAAK,EAACC,KFxCW,WEyCjBC,UAAWK,SCnCGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c18db55.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as routes from '../constants/routes';\n\nconst Navigation = () =>\n  <div>\n    <ul>\n      <li><Link to={routes.SIGN_IN}>Sign In</Link></li>\n      <li><Link to={routes.LANDING}>Landing</Link></li>\n      <li><Link to={routes.HOME}>Home</Link></li>\n      <li><Link to={routes.ACCOUNT}>Account</Link></li>\n    </ul>\n  </div>\n\nexport default Navigation;\n","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const LANDING = '/';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const PASSWORD_FORGET = '/pw-forget';\n","import React from 'react';\n\nconst LandingPage = () =>\n  <div>\n    <h1>Landing Page</h1>\n  </div>\n\nexport default LandingPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from 'react-router-dom';\n\nimport Navigation from './Navigation';\nimport LandingPage from './Landing';\nimport SignUpPage from './SignUp';\nimport SignInPage from './SignIn';\nimport PasswordForgetPage from './PasswordForget';\nimport HomePage from './Home';\nimport AccountPage from './Account';\n\nimport * as routes from '../constants/routes';\n\nconst App = () =>\n<Router>\n  <div>\n    <Navigation />\n\n    <hr/>\n\n    <Route\n      exact path={routes.LANDING}\n      component={LandingPage}\n    />\n    <Route\n      exact path={routes.SIGN_UP}\n      component={SignUpPage}\n    />\n    <Route\n      exact path={routes.SIGN_IN}\n      component={SignInPage}\n    />\n    <Route\n      exact path={routes.PASSWORD_FORGET}\n      component={PasswordForgetPage}\n    />\n    <Route\n      exact path={routes.HOME}\n      component={HomePage}\n    />\n    <Route\n      exact path={routes.ACCOUNT}\n      component={AccountPage}\n    />\n  </div>\n</Router>\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}